@* Part Edit Component *@

@implements IDialogContentComponent<PartVm>

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync"
                  Disabled="@(!_editContext.Validate())">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody Orientation="Orientation.Horizontal">
    <EditForm EditContext="_editContext">
        <FluentValidationValidator @ref="_fluentValidator" />

        <FluentGrid Justify="@Justification">
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    <FluentTextField Id="Name" @bind-Value="@Content.Name" Placeholder="Enter name"> Name: </FluentTextField>
                    <FluentValidationMessage For="@(() => Content.Name)" />

                </div>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentTextField Id="Description" @bind-Value="@Content.Description" Placeholder="Enter description"> Description: </FluentTextField>
                    <FluentValidationMessage For="@(() => Content.Description)" />
                </div>
            </FluentGridItem>

            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentNumberField Id="WarrantyPeriod" @bind-Value="@Content.WarrantyPeriod" Placeholder="Enter WarrantyPeriod"> Warranty Period: </FluentNumberField>
                    <FluentValidationMessage For="@(() => Content.WarrantyPeriod)" />
                </div>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                        // Check if it's an Edit operation

                        if (Content.Id != 0)
                        {
                            <FluentSelect TOption="CategoryVm"
                                          Label="Select a category..."
                                          Items="@itemCategoryList"
                                          Id="Id"
                                          Width="150px"
                                          Height="250px"
                                          OptionValue="@(p => p.Id.ToString())"
                                          OptionText="@(p => p.Name)"
                                          @bind-SelectedOption="@Content.CategoryVm" />
                        }
                        else
                        {
                            // For new records
                            <FluentSelect TOption="CategoryVm"
                                          Label="Select a category..."
                                          Items="@itemCategoryList"
                                          Id="Id"
                                          Width="150px"
                                          Height="250px"
                                          OptionValue="@(p => p.Id.ToString())"
                                          OptionText="@(p => p.Name)"
                                          @bind-SelectedOption="@SelectedCategory" />
                        }
                    }

                    <FluentValidationMessage For="@(() => Content.CategoryVm.Name)" />
                </div>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                        // Check if it's an Edit operation

                        if (Content.Id != 0)
                        {
                            <FluentSelect TOption="VendorVm"
                                          Label="Select a vendor..."
                                          Items="@itemVendorList"
                                          Id="Id"
                                          Width="150px"
                                          Height="250px"
                                          OptionValue="@(p => p.Id.ToString())"
                                          OptionText="@(p => p.Name)"
                                          @bind-SelectedOption="@Content.VendorVm" />
                        }
                        else
                        {
                            // For new records
                            <FluentSelect TOption="VendorVm"
                                          Label="Select a vendor..."
                                          Items="@itemVendorList"
                                          Id="Id"
                                          Width="150px"
                                          Height="250px"
                                          OptionValue="@(p => p.Id.ToString())"
                                          OptionText="@(p => p.Name)"
                                          @bind-SelectedOption="@SelectedVendor" />
                        }
                    }

                    <FluentValidationMessage For="@(() => Content.VendorVm.Name)" />
                </div>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentTextField Id="Photo" @bind-Value="@Content.Photo" Placeholder="Enter Photo"> Photo: </FluentTextField>
                    <FluentValidationMessage For="@(() => Content.Photo)" />
                </div>
            </FluentGridItem>

        </FluentGrid>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="validation-error"><p style="color:red;">@errorMessage</p></div>
        }
    </EditForm>
</FluentDialogBody>


@code {
    [Parameter]
    public PartVm Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    JustifyContent Justification = JustifyContent.FlexStart;

    private EditContext _editContext;

    private FluentValidationValidator? _fluentValidator;
    private string errorMessage;
    private IQueryable<CategoryVm> itemCategoryList ;
    private IQueryable<VendorVm> itemVendorList ;

    private CategoryVm SelectedCategory { get; set; } = new CategoryVm { };
    private VendorVm SelectedVendor { get; set; } = new VendorVm { };

    protected override async Task OnInitializedAsync()
    {

        _editContext = new EditContext(Content);
        await GetCategories();
        await GetVandors();
        base.OnInitialized();
    }
    private async Task GetCategories()
    {
        List<CategoryVm> categories = new List<CategoryVm>
            {
            
        
                new CategoryVm { Id = 1, Name = "Laptop", CategoryType = "Hardware", Prefix = "LAP", StatusId = 1 },
                new CategoryVm { Id = 2, Name = "Desktop", CategoryType = "Hardware", Prefix = "DESK", StatusId = 1 },
                new CategoryVm { Id = 3, Name = "MPLS", CategoryType = "Service", Prefix = "CON", StatusId = 1 },
                new CategoryVm { Id = 4, Name = "Microsoft Office", CategoryType = "Software", Prefix = "MSO", StatusId = 1 }
            
            };

        itemCategoryList = categories.AsQueryable();

    }
    private async Task GetVandors()
    {
        List<VendorVm> vendors = new List<VendorVm>
        {
            new VendorVm { Id = 1, Name = "Microsoft", StatusId = 1},
            new VendorVm { Id = 2, Name = "Dell", StatusId = 1 },
            new VendorVm { Id = 3, Name = "At&T", StatusId = 1 }

        };
        itemVendorList = vendors.AsQueryable();
    }
    private async Task SaveAsync()
    {
        Console.WriteLine("SaveAsync starts...");
        if (_editContext.Validate())
        {
            Console.WriteLine("EditContext Validation OK!...");
        }
        else
        {
            Console.WriteLine("EditContext Validation NOT OK!...");
            return;
        }
        if (Content.Id != 0)
        {
            await Dialog.CloseAsync(Content);
        }
        else
        {
            if (SelectedCategory.Id != 0 || SelectedVendor.Id != 0)
            {
                Content.CategoryVm = SelectedCategory;
                Content.VendorVm = SelectedVendor;
                await Dialog.CloseAsync(Content);
            }
            else
            {
                Console.WriteLine();
                errorMessage = "Plese select Category or Vendor!";
            }
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}


